<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Sierra Alta</title>

  <script src="https://cdn.jsdelivr.net/npm/regenerator-runtime@0.13.7/runtime.min.js"></script>
  <meta name="importmap-type" content="systemjs-importmap" />
  <script type="systemjs-importmap">
    {
      "imports": {
        "single-spa": "https://cdn.jsdelivr.net/npm/single-spa@5.9.3/lib/system/single-spa.min.js",
        "react": "https://cdn.jsdelivr.net/npm/react@17.0.2/umd/react.production.min.js",
        "react-dom": "https://cdn.jsdelivr.net/npm/react-dom@17.0.2/umd/react-dom.production.min.js"
      }
    }
  </script>
  <link rel="preload" href="https://cdn.jsdelivr.net/npm/single-spa@5.9.3/lib/system/single-spa.min.js" as="script">

  <!--
    If you need to support Angular applications, uncomment the script tag below to ensure only one instance of ZoneJS is loaded
    Learn more about why at https://single-spa.js.org/docs/ecosystem-angular/#zonejs
  -->
  <script src="https://cdn.jsdelivr.net/npm/zone.js@0.11.3/dist/zone.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/import-map-overrides@2.2.0/dist/import-map-overrides.js"></script>
  <% if (isLocal) { %>
  <script type="systemjs-importmap" src="/importmap.json"></script>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <% } else { %>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.min.js"></script>
  <% } %>
  <!-- <meta http-equiv="Content-Security-Policy" content="connect-src http://198.27.76.185:9100 https: localhost:* ws://localhost:* 'self'"> -->
  <meta http-equiv="Content-Security-Policy" content="connect-src https: http://apisistemas.ddns.net:9100 localhost:* ws://localhost:* 'self';">
  <!-- <meta http-equiv="Content-Security-Policy" content="default-src 'self' https: localhost:*; script-src 'unsafe-inline' 'unsafe-eval' https: localhost:*; connect-src https: localhost:* ws://localhost:*; style-src 'unsafe-inline' https:; object-src 'none';"> -->
</head>

<body>
  <div class="layout-preloader-container" id="global-loader">
    <div class="layout-preloader-content">
      <svg class="layout-preloader" width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
        <circle class="layout-preloader-path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33"
          r="30"></circle>
      </svg>
    </div>
  </div>
  <noscript>
    You need to enable JavaScript to run this app.
  </noscript>
  <script>
    System.import('@shell/root-config');
    window.addEventListener('single-spa:first-mount', async () => {
      const loader = document.getElementById('global-loader');
      if (loader) loader.style.display = 'none';

      try {
        const { getContainerClass } = await System.import('@test/mf-utils-modules');
        const container = document.querySelector('.layout-container');
        if (!container) return;

        const classes = getContainerClass();
        for (const [className, isActive] of Object.entries(classes)) {
          container.classList.toggle(className, isActive);
        }
      } catch (error) {
        console.error('Error applying layout container classes:', error);
      }
    });

    // Listener para actualización dinámica de clases de layout-container
    window.addEventListener('layout-updated', async () => {
      try {
        const { getContainerClass } = await System.import('@test/mf-utils-modules');
        const container = document.querySelector('.layout-container');
        if (!container) return;

        const classes = getContainerClass();
        container.className = 'layout-container'; // Reset base
        for (const [cls, isActive] of Object.entries(classes)) {
          if (isActive) container.classList.add(cls);
        }

        // Listener para actualizar la paleta de surface
      } catch (error) {
        console.error('Error applying updated layout container classes:', error);
      }
    });

    // Surface palette event listener: aplica la paleta al document.documentElement
    window.addEventListener('surface-updated', (e) => {
      const palette = e.detail;
      if (!palette) return;
      const root = document.documentElement;
      for (const [key, value] of Object.entries(palette)) {
        root.style.setProperty(`--surface-${key}`, value);
      }
    });
  </script>
  <import-map-overrides-full show-when-local-storage="devtools" dev-libs></import-map-overrides-full>
</body>

</html>